buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
    }
}

plugins {
    id "com.moowork.node" version "1.2.0"
    id "com.moowork.gulp" version "1.2.0"
}

group 'com.syzmicanomaly'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    //compile "org.springframework.boot:spring-boot-starter-data-rest" //TODO not using for now

    compile "org.springframework.boot:spring-boot-devtools"

    compile "org.apache.commons:commons-lang3:3.4"
    compile "commons-validator:commons-validator:1.4.1"

    compile "io.springfox:springfox-swagger2:2.8.0"
    compile "io.springfox:springfox-data-rest:2.8.0"
    compile "io.springfox:springfox-swagger-ui:2.8.0"

    compile "com.h2database:h2"
    compile "com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8"
    compile "org.postgresql:postgresql:42.2.1"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.boot:spring-boot-test-autoconfigure"
}

//noinspection GroovyAssignabilityCheck
bootRun.systemProperties = System.properties //allows passing -D vars to bootRun at command line

project.task([type: Class.forName('com.moowork.gradle.node.task.NodeTask'), group: 'gulp'], 'execGulp') {
    args = [
            '--root-dir',
            project.projectDir.absolutePath,
            '--task',
            safeGetProperty(project, 'gulpTask', 'default')
    ]
    script = project.file('gulpfile.js')
}

project.task([type: Class.forName('com.moowork.gradle.node.task.NodeTask'), group: 'gulp'], 'watchGulp') {
    args = [
            '--root-dir',
            project.projectDir.absolutePath,
            '--task',
            'watch'
    ]
    script = project.file('gulpfile.js')
}

//TODO get rid of this by passing in DO_COPY in node env (handled in webpack.js task)
task copyWebpackResources(description: 'Copies all generated Webpack files', dependsOn: ['execGulp']) {
    doLast {
        copy {
            from "${project.buildDir}/webpack/resources"
            into "${project.buildDir}/resources/main/static"
        }
    }
}

project.tasks['execGulp'].dependsOn 'installGulp'
project.tasks['installGulp'].dependsOn 'npmInstall'
project.tasks['classes'].dependsOn 'execGulp'
project.tasks['copyWebpackResources'].mustRunAfter 'processResources'
project.tasks['bootRun'].dependsOn 'copyWebpackResources'
project.tasks['build'].dependsOn 'copyWebpackResources'

static String safeGetProperty(Project proj, String property, String defValue) {
    try {
        def val = proj.property(property)
        return val
    } catch (ignored) {
        return defValue
    }
}
